# H2 데이터베이스 설정

# H2 데이터베이스 연결 URL 주소입니다.
# jdbc:h2:mem:testdb
# - "jdbc:h2:" -> H2 데이터베이스에 연결한다는 뜻입니다.
# - "mem:" -> In-Memory(메모리) 모드로 실행한다는 뜻입니다. (프로그램을 끄면 데이터가 사라짐. 개발용)
# - "testdb" -> 우리가 만들 메모리 DB의 이름입니다. (H2 콘솔 접속 시 이 이름이 필요합니다.)
spring.datasource.url=jdbc:h2:mem:testdb

# H2 데이터베이스에 접속하기 위한 드라이버 클래스 이름입니다.
spring.datasource.driverClassName=org.h2.Driver

# H2 데이터베이스의 기본 관리자 아이디(username)입니다.
spring.datasource.username=sa

# H2 데이터베이스의 기본 비밀번호(password)입니다. (기본값은 '없음'입니다.)
spring.datasource.password=

# --- H2 콘솔 설정 (DB 관리 화면) ---

# H2 콘솔(웹 관리 화면)을 사용하도록 설정합니다. (true = 사용함)
spring.h2.console.enabled=true

# H2 콘솔에 접속할 URL 경로를 정합니다.
# http://localhost:8080/h2-console 로 접속할 수 있게 됩니다.
spring.h2.console.path=/h2-console


# JPA (Hibernate) 설정


# JPA가 Java Entity 클래스를 보고 DB 테이블을 어떻게 다룰지 정하는 옵션입니다.
# - "update" -> Entity 클래스가 변경되면(예: 새 필드 추가), DB 테이블도 자동으로 변경(수정)합니다.
#               기존에 저장된 데이터는 삭제되지 않습니다. (개발 시 가장 편리함)
# - "create" -> 앱 실행 시마다 기존 테이블을 삭제하고 새로 만듭니다. (데이터가 매번 사라짐)
spring.jpa.hibernate.ddl-auto=update

# JPA가 DB에 실제 실행하는 SQL 쿼리문을 IntelliJ 콘솔 창에 보여줍니다. (true = 보여줌)
spring.jpa.show-sql=true

# H2 데이터베이스의 SQL 문법(Dialect)을 사용하도록 설정합니다.
spring.jpa.database-platform=org.hibernate.dialect.H2Dialect